#BlueJ class context
comment0.params=
comment0.target=StringBearbeitung()
comment0.text=\r\n\ Der\ parameterlose\ Konstruktor.\ Initialisiert\ dies\ Zeichenkette\ mit\ willkuerlicher\ Zeichenkette\r\n
comment1.params=zeichenkette
comment1.target=StringBearbeitung(java.lang.String)
comment1.text=\r\n\ Kopierkonstruktor;\ initialisiert\ diese\ Zeichenkette\ mit\ der\ uebergebenen\ Zeichenkette.\r\n\ @param\ zeichenkette\ Eingabe\ der\ Zeichenkette,\ mit\ welcher\ gearbeitet\ werden\ soll.\r\n
comment10.params=
comment10.target=boolean\ istLeer()
comment10.text=\r\n\ Prueft,\ ob\ diese\ Zeichenkette\ leer\ ist,\ also\ keine\ Zeichen\ enthaelt.\ Gibt\ true\ zurueck,\r\n\ falls\ die\ Zeichenkette\ keine\ Zeichen\ enthaelt,\ false\ sonst.\r\n\ @param\ gibt\ true,\ wenn\ die\ Zeichenkette\ leer\ ist.\r\n
comment11.params=anzahl
comment11.target=java.lang.String\ gibAnfang(int)
comment11.text=\r\n\ Gibt\ die\ Zeichenkette\ zurueck,\ die\ die\ ersten\ 'anzahl'\ Zeichen\ dieser\ Zeichenkette\ enthaelt.\r\n@param\ anzahl\ Anzahl\ der\ Zeichenkette\ welche\ zur\u00FCckgegeben\ werden\ soll.\r\n@return\ gibt\ die\ ersten\ der\ in\ anzahl\ \u00FCbergebenen\ Zeichen\ der\ Zeichenkette\ zur\u00FCck.\r\n
comment12.params=
comment12.target=int\ erstesLeerzeichen()
comment12.text=\r\n\ Gibt\ die\ Position\ des\ ersten\ Leerzeichens\ dieser\ Zeichenkette\ zurueck.\r\n\ @return\ gibt\ Position\ des\ ersten\ leerzeichens\ zur\u00FCck\ 0\ basierte\ Z\u00E4hlweise.\r\n
comment13.params=andereKette
comment13.target=java.lang.String\ verkette(java.lang.String)
comment13.text=\r\n\ Verkettet\ diese\ Zeichenkette\ mit\ der\ uebergebenen\ Zeichenkette\ 'andereKette'\ und\ gibt\ \r\n\ das\ Ergebnis\ zurueck.\r\n\ @param\ andereKette\ unsere\ Zeichenkette\ wird\ hiermit\ verkettet.\r\n\ @return\ R\u00FCckgabe\ der\ verketten\ Zeichenketten.\r\n
comment14.params=zKette1\ zKette2
comment14.target=java.lang.String\ verkette(java.lang.String,\ java.lang.String)
comment14.text=\r\n\ Verkettet\ 2\ uebergebene\ Zeichenketten\ und\ gibt\ das\ Ergebnis\ zurueck.\r\n\ @param\ zKette1\ erste\ Zeichenkette\r\n\ @param\ zKette2\ zweite\ Zeichenkette\r\n\ @return\ gibt\ das\ ergebnis\ der\ beiden\ verketteten\ Zeichenketten\ zur\u00FCck.\r\n
comment15.params=wort
comment15.target=int\ findeTeilkette(java.lang.String)
comment15.text=\r\n\ Prueft,\ ob\ das\ uebergebene\ Wort\ in\ dieser\ Zeichenkette\ enthalten\ ist\ und\ gibt\ den\r\n\ Index\ des\ ersten\ Zeichens\ zurueck,\ bei\ dem\ der\ uebereinstimmende\ Bereich\ beginnt.\r\n\ @param\ wort\ pr\u00FCft\ ob\ das\ wort\ in\ der\ Zeichenkette\ enthalten\ ist\ und\ gibt\ den\ Index\ zur\u00FCck.\r\n\ @return\ gibt\ den\ index\ des\ ersten\ Zeichens\ zur\u00FCck\ bei\ dem\ der\ uebereinstimmende\ Bereich\ beginnt.\r\n
comment16.params=zKette1\ zKette2
comment16.target=java.lang.String[]\ inLexikografischerReihenfolge(java.lang.String,\ java.lang.String)
comment16.text=\r\n\ Vergleicht\ die\ beiden\ uebergebenen\ Zeichenketten.\ Gibt\ ein\ String-Array\ zurueck,\ \r\n\ das\ die\ beiden\ Zeichenketten\ in\ lexikografischer\ Reihenfolge\ enthaelt.\ (Die\ im\ \r\n\ Lexikon\ weiter\ vorne\ stehende\ Zeichenkette\ soll\ auch\ im\ Array\ vorne\ stehen)\r\n\ @param\ zKette1\ Erste\ Zeichenkette.\r\n\ @param\ zKette2\ Zweite\ Zeichenkette.\r\n\ @return\ Array\ der\ Strings\ in\ in\ lexikografischer\ Reihenfolge.\r\n
comment17.params=teilkette
comment17.target=int\ anzahlVorkommen(java.lang.String)
comment17.text=\r\n\ Prueft,\ wie\ oft\ eine\ uebergebene\ Zeichenkette\ in\ dieser\ Zeichenkette\r\n\ enthalten\ ist.\ Dabei\ soll\ Gross-/Kleinschreibung\ nicht\ unterschieden\ werden.\ Gibt\r\n\ zurueck,\ wie\ oft\ die\ Teilkette\ in\ dieser\ Zeichenkette\ enthaten\ ist.\r\n\ @param\ teilkette\ Welche\ gegen\ die\ zeichenkette\ gepr\u00FCft\ werden\ soll.\r\n\ @return\ Anzahl\ der\ vorkommen\ der\ \u00DCbergebenen\ teilkette\ in\ der\ Zeichenkette.\r\n
comment18.params=eMailAdresse
comment18.target=java.lang.String\ gibHost(java.lang.String)
comment18.text=\r\n\ Findet\ den\ Hostnamen\ in\ einer\ uebergebenen\ Zeichenkette,\ welche\ eine\ Email-Adresse\ enthaelt.\r\n\ Die\ Email-Adresse\ soll\ das\ Format\ "benutzername@hostname"\ haben.\ Der\ Hostname\ soll\ als\r\n\ Zeichenkette\ zurueckgegeben\ werden.\r\n\ @param\ eMailAdresse\ \u00DCbergebene\ Emailadresse\ zum\ hostnamen\ Suchen.\r\n\ @return\ Gibt\ den\ gefundenen\ Hostnamen\ zur\u00FCck.\r\n
comment2.params=
comment2.target=void\ zeigeZeichenkette()
comment2.text=\r\n\ Gibt\ diese\ Zeichenkette\ aus.\r\n
comment3.params=
comment3.target=int\ gibLaenge()
comment3.text=\r\n\ Ermittelt\ die\ Laenge\ dieser\ Zeichenkette.\r\n\ @return\ L\u00E4nge\ der\ Zeichenkette\ in\ ganzen\ Zahlen.\r\n
comment4.params=andereZeichenkette
comment4.target=boolean\ istGleich(java.lang.String)
comment4.text=\r\n\ \ Vergleicht\ diese\ Zeichenkette\ mit\ anderer\ Zeichenkette.\ (2\ Zeichenketten\ werden\ als\ \r\n\ \ gleich\ verstanden,\ wenn\ Sie\ den\ gleichen\ Inhalt\ haben\ und\ nicht\ nur,\ wenn\ die\ auf\ sie\r\n\ \ verweisenden\ Referenzen\ gleich\ sind.)\r\n\ \ @param\ andereZeichenkette\ Eingabe\ einer\ Zeichenkette,\ mit\ der\ verglichen\ werden\ soll.\r\n\ \ @return\ ist\ die\ Zeichenkette\ gleich?\ True,\ wenn\ ja.\r\n
comment5.params=
comment5.target=java.lang.String\ inKleinbuchstabenWandeln()
comment5.text=\r\n\ Erzeugt\ Zeichenkette,\ bei\ der\ alle\ Grossbuchstaben\ dieser\ Zeichenkette\ in\ Kleinbuchstaben\ \r\n\ gewandelt\ wurden\ und\ gibt\ die\ gewandelte\ Zeichenkette\ zurueck.\r\n\ @return\ die\ in\ Kleinbuchstaben\ umgewandelte\ Zeichenkette.\r\n
comment6.params=startKette
comment6.target=boolean\ beginntMit(java.lang.String)
comment6.text=\r\n\ Prueft,\ ob\ diese\ Zeichenkette\ mit\ der\ uebergebenen\ Zeichenkette\ beginnt.\r\n\ @param\ startKette\ Eingabe\ der\ Zeichenkette\ mit\ mit\ der\ gepr\u00FCft\ werden\ soll.\r\n\ @return\ Wenn\ die\ Zeichenkette\ mit\ der\ eingegeben\ \u00FCberinstimmt,\ true,\ sonst\ false.\r\n
comment7.params=
comment7.target=void\ AnfangUndEndeBereinigen()
comment7.text=\r\n\ Entfernt\ fuehrende\ und\ abschliessende\ Leerzeichen\ dieser\ Zeichenkette,\ sofern\ vorhanden.\r\n
comment8.params=kette
comment8.target=java.lang.String\ AnfangUndEndeBereinigen(java.lang.String)
comment8.text=\r\n\ Entfernt\ fuehrende\ und\ abschliessende\ Leerzeichen\ der\ uebergebenen\ Zeichenkette,\ \r\n\ sofern\ vorhanden.\ Das\ Ergebnis\ wird\ zurueckgegeben.\r\n\ @param\ kette\ Zeichenkette,\ welche\ der\ Leerzeichen\ beraubt\ werden\ soll.\r\n\ @return\ R\u00FCckgabe\ der\ von\ Leerzeichen\ bereinigten\ Zeichenkette\r\n
comment9.params=wort
comment9.target=boolean\ enthaelt(java.lang.String)
comment9.text=\r\n\ Prueft,\ ob\ das\ uebergebene\ Wort\ in\ der\ Kette\ enthalten\ ist.\ Gibt\ true\ zurueck,\r\n\ falls\ das\ Wort\ enthalten\ ist,\ false\ sonst.\r\n@param\ wort\ Wort,\ welches\ in\ der\ Zeichenkette\ enthalten\ sein\ soll.\ \r\n@return\ gibt\ true,\ wenn\ das\ eingegebene\ Wort\ in\ der\ Zeichenkette\ enthalten\ ist,\ ansonsten\ false.\r\n
numComments=19
